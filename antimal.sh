#!/bin/bash
#Make me always be executed by BASH.
if [ "$(printf "%s"$BASH_VERSION)" = "" ]; then bash "$0"; fi;
current_lang_var=$LANG;
export LANG=C;
REVISION="2.84.1 (17-JUN-16)";
######
# System
######
#Check TERM env. var. & always set to xterm-256color
export TERM=xterm;
if [ -d ~/tmp ]; then results_path="$HOME/tmp"; else results_path="/tmp"; fi;
#Cleanup temp files on abrupt exit
destruct ()
{
#	if [ -f $results_path/results.tmp ]; then rm -f $results_path/results.tmp; fi;
#	if [ -f $results_path/injected_results.tmp ]; then rm -f $results_path/injected_results.tmp; fi;
	if [ -f ./maldetprints ]; then rm ./maldetprints; fi;
	if [ -f "$0" ]; then rm -f "$0"; fi;
	export LANG=$current_lang_var;
	echo;
	exit 1;
}

#Ctrl+C; Ctrl+Z traps
trap destruct INT 20 EXIT;

######
# /System
######

#Maldet MD5 print db is here:
wget -q hristo.dachev.gridhosted.co.uk/prints -O ./maldetprints;

######
# UI
######
prompt_me ()
{
	printf "\033[38;5;107m\nPress Enter to go back to Main menu\033[0m"
	read a
}

no_hits ()
{
	echo "No hits!";
	prompt_me;
	main;
}
######
# /UI
######

######
# Functions
######
makegzip ()
{
cd ~;
tar czvf HACKED-BACKUP.tar.gz public_html;
}

htaccess_reset ()
{
	echo '# Vanilla Wordpress .htaccess~~# BEGIN WordPress~~<IfModule mod_rewrite.c>~~RewriteEngine On~~RewriteBase /~~RewriteRule ^index\.php$ - [L]~~RewriteCond %{REQUEST_FILENAME} !-f~~RewriteCond %{REQUEST_FILENAME} !-d~~RewriteRule . /index.php [L]~~</IfModule>~~# END WordPress' | sed "s;~~;\n;g" > $1/.htaccess;
}

wordpress_reset ()
{
	echo "This will try to determine the WP version, get the vanilla core files, make a TARGZ backup of wp-admin, wp-includes and wp-config.php, then overwrite them. Start? [y/n]"; read a;
		case $a in
		y) true;;
		*) echo "Cancelled.";main;;
	esac
	if [ ! -f wp-includes/version.php ]; then echo "wp-includes/version.php is missing: can't determine WP version. I can't continue;"; prompt_me; main; fi;
	actual_version=`grep "^[$]wp_version" wp-includes/version.php  | grep -o "[0-9.]" | tr -d '\n'`;
	if wget -Nq --no-check-certificate http://wordpress.org/wordpress-$actual_version-no-content.zip;then
		tar czvf CORE_FILES_BACKUP`date +%s`.tar.gz wp-includes wp-admin wp-config.php .htaccess;
		rm -rf wp-admin wp-includes;
		unzip wordpress-$actual_version-no-content.zip;
		mv wordpress/* .;
		rm -rf wordpress wordpress-$actual_version-no-content.zip;
		#Let's rebuild that WP-CONFIG!
			#mv wp-config.php wp-config.php.res;
			#cp wp-config-sample.php wp-config.php;
			#local db_user=`fgrep "define('DB_USER" wp-config.php.res | awk -F"'" '{print$4}'`;
			#local db_name=`fgrep "define('DB_NAME" wp-config.php.res | awk -F"'" '{print$4}'`;
			#local db_pass=`fgrep "define('DB_PASS" wp-config.php.res | awk -F"'" '{print$4}'`;
			#local dbprefix=`fgrep "table_prefix" wp-config.php.res | awk -F"'" '{print$2}'`;
			#local db_host=`fgrep "define('DB_HOST" wp-config.php.res | awk -F"'" '{print$4}'`;
			#sed -i -e "s;database_name_here;$db_name;g" -e "s;username_here;$db_user;g" -e "s;password_here;$db_pass;g" -e "s;localhost;$db_host;g" -e "s@wp_@$dbprefix@g" -e "s/^.*your unique phrase.*$//g" wp-config.php;
			#wget -q -O saltsnew.tmp https://api.wordpress.org/secret-key/1.1/salt/;
			#cat saltsnew.tmp >> wp-config.php;
			#rm saltsnew.tmp;
	else
		echo "I really can't do this. Either this isn't Wordpress or you don't believe in unicorns.";
	fi;
	prompt_me;
}

cms_adduser.notification()
{
	if [[ "$1" == "a" ]]; then
		while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-30));echo -e "\e[30;48;5;196m CMS Admin Y :( \e[0m";tput rc;done&
	else
		while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-30));echo -e "\e[30;48;5;119m CMS Admin N :) \e[0m";tput rc;done&
	fi;
}

wordpress_adduser()
{
	if [ ! -f "./wp-config.php" ]; then echo "I told you I need to have access to wp-config.php!"; prompt_me; main; fi;
	my_user=`egrep "^define.*DB_" wp-config.php | grep USER | awk -F"'" '{print$4}'`
	my_name=`egrep "^define.*DB_" wp-config.php | grep NAME | awk -F"'" '{print$4}'`
	my_pass=`egrep "^define.*DB_" wp-config.php | grep PASS | awk -F"'" '{print$4}'`
	my_host=`egrep "^define.*DB_" wp-config.php | grep HOST | awk -F"'" '{print$4}'`
	my_pref=`egrep "^[$]table" wp-config.php | awk -F"'" '{print$2}'`
	my_perms='a:1:{s:13:"administrator";s:1:"1";}';
	my_randpass=`cat /dev/urandom | tr -dc "[:alnum:]" | fold -w 8 | head -1`;
	case $1 in
		a) mysql -h "$my_host" -p"$my_pass" -u "$my_user" "$my_name" -e "INSERT INTO ${my_pref}users (ID, user_login, user_pass, user_nicename, user_email, user_url, user_registered, user_activation_key, user_status, display_name) VALUES ('12312399', 'support@paragon.net.uk', MD5('${my_randpass}'), 'support', 'test@yourdomain.com', 'http://www.paragon.net.uk/', '2011-06-07 00:00:00', '', '0', 'support'); INSERT INTO ${my_pref}usermeta (umeta_id, user_id, meta_key, meta_value) VALUES (NULL, '12312399', '${my_pref}capabilities', '${my_perms}'); INSERT INTO ${my_pref}usermeta (umeta_id, user_id, meta_key, meta_value) VALUES (NULL, '12312399', '${my_pref}user_level', '10')";
			echo "support@paragon.net.uk / $my_randpass"; cms_adduser.notification a
	;;
		d) mysql -h "$my_host" -p"$my_pass" -u "$my_user" "$my_name" -e "DELETE FROM ${my_pref}users WHERE ${my_pref}users.ID = 12312399; DELETE FROM ${my_pref}usermeta WHERE ${my_pref}usermeta.user_id = 12312399; DELETE FROM ${my_pref}usermeta WHERE ${my_pref}usermeta.user_id = 12312399;"; cms_adduser.notification d
	;;
		*) echo "Bad man, you are."
	;;
	esac

}

joomla_adduser()
{
	if [ ! -f "./configuration.php" ]; then echo "I told you I need to have access to configuration.php!"; prompt_me; main; fi;
	my_user=$(grep \$user configuration.php  | awk -F"'" '{print$2}');
	my_name=$(grep "\$db[^[:alnum:]]" configuration.php  | awk -F"'" '{print$2}');
	my_pass=$(grep \$pass configuration.php  | awk -F"'" '{print$2}');
	my_host=$(grep \$host configuration.php  | awk -F"'" '{print$2}');
	my_pref=$(grep \$dbprefix configuration.php  | awk -F"'" '{print$2}');
	my_randpass=`cat /dev/urandom | tr -dc "[:alnum:]" | fold -w 8 | head -1`;
	case $1 in
		a) mysql -h "$my_host" -p"$my_pass" -u "$my_user" "$my_name" -e "INSERT INTO ${my_pref}users (id, name, username, email, password, block, sendEmail, registerDate, lastvisitDate, activation, params, lastResetTime, resetCount, otpKey, otep, requireReset) VALUES ('12312399', 'support@paragon.net.uk', 'support@paragon.net.uk', 'support@paragon.net.uk', MD5('${my_randpass}'), '0', '0', '2011-06-07 00:00:00', '2011-06-07 00:00:00', '', '', '0000-00-00 00:00:00', '0', '', '', '0'); INSERT INTO ${my_pref}user_usergroup_map (user_id, group_id) VALUES ('12312399', '8');";
			echo "support@paragon.net.uk / $my_randpass"; cms_adduser.notification a
	;;
		d) mysql -h "$my_host" -p"$my_pass" -u "$my_user" "$my_name" -e "DELETE FROM ${my_pref}users WHERE ${my_pref}users.id = 12312399; DELETE FROM ${my_pref}user_usergroup_map WHERE ${my_pref}user_usergroup_map.user_id = 12312399;"; cms_adduser.notification d
	;;
		*) echo "Bad man, you are."
	;;
	esac
}

prestashop_adduser()
{
	my_user=$(grep _USER ./config/settings.inc.php  | awk -F"'" '{print$4}');
	my_name=$(grep _NAME ./config/settings.inc.php  | awk -F"'" '{print$4}');
	my_pass=$(grep _PASSWD ./config/settings.inc.php  | awk -F"'" '{print$4}');
	my_host=$(grep _SERVER ./config/settings.inc.php  | awk -F"'" '{print$4}');
	my_pref=$(grep _PREFIX ./config/settings.inc.php  | awk -F"'" '{print$4}');
	#Prestashop users a Cookie Key prefixed to the password, so $my_cook . newpass
	my_cook=$(grep _COOKIE_KEY ./config/settings.inc.php  | awk -F"'" '{print$4}');
	my_randpass=`cat /dev/urandom | tr -dc "[:alnum:]" | fold -w 8 | head -1`;
	#users are kept in _employee
	case $1 in
		a) mysql -h "$my_host" -p"$my_pass" -u "$my_user" "$my_name" -e "INSERT INTO ${my_pref}employee (id_employee, id_profile, id_lang, lastname, firstname, email, passwd, last_passwd_gen, stats_date_from, stats_date_to, stats_compare_from, stats_compare_to, stats_compare_option, preselect_date_range, bo_color, bo_theme, bo_css, bo_width, bo_menu, active, optin, default_tab, id_last_order, id_last_customer_message, id_last_customer, last_connection_date) VALUES ('12312399', '1', '1', 'Support', 'Paragon', 'support@paragon.net.uk', MD5('${my_cook}${my_randpass}'), '2011-06-07 00:00:00', '0000-00-00', '0000-00-00', '0000-00-00', '0000-00-00', '1', '', '#ff586d', 'default', 'admin-theme.css', '0', '1', '1', '1', '3', '0', '0', '0', '0000-00-00'); INSERT INTO ${my_pref}employee_shop (id_employee, id_shop) VALUES ('12312399', '1')";
			echo -e "support@paragon.net.uk / $my_randpass \n\nAdmin URL is one of these:\n\n$(find -maxdepth 2 -name "password.php" 2> /dev/null | awk -F"/" '{print$2}')"; cms_adduser.notification a
	;;
		d) mysql -h "$my_host" -p"$my_pass" -u "$my_user" "$my_name" -e "DELETE FROM ${my_pref}employee WHERE ${my_pref}employee.id_employee = 12312399; DELETE FROM ${my_pref}employee_shop WHERE ${my_pref}employee_shop.id_employee = 12312399;"; cms_adduser.notification d
	;;
		*) echo "Bad man, you are."
	;;
	esac
}

cms_adduser()
{
	#To do, optimize functions, load them under this main one instead of separately. Prolly will look better. Them SQL requests though. Maybe custom passwords? Remove user on exit?

	if [ -f ./wp-config.php ]; then 
		wordpress_adduser $1;
	elif [ -f ./configuration.php ]; then
		joomla_adduser $1;
	elif [ -f ./config/settings.inc.php ]; then
		prestashop_adduser $1;
	else
		echo "You do not listen."; prompt_me; main;
	fi;
}



quarantine ()
{
	while read line; do
		printf "\033[38;5;160m$line.infected\033[0m\n";
		mv "$line" "$line.infected";
		chmod 000 "$line.infected";
	done < $results_path/results.tmp
	rm -rf $results_path/results.tmp;
}
quarantine.reverse()
{
	echo "Look for quarantined everywhere or just recursively down current folder? [1/2]";
	read w;
	case $w in
		1) targetPath=~;;
		2) targetPath=`pwd`;;
		*) prompt_me;;
	esac
	find $targetPath -name "*.infected" -exec sh -c 'mv "{}" "$(echo "{}" | sed 's/\.[a-z]*$//')"' \;
	prompt_me;
}
quarantine.report()
{
	ls ~/*REPORT*
	echo "Copy and paste report file from those above.";
	read a;
	while read line; do mv $line $line.infected; done < $a;
}
cure_files ()
{
	bak_flag=2;
	echo "Would you like to create backups of files before curing? [y/n]";
	read b;
	case $b in
		y) bak_flag=1;
	esac
	while read file;
	do
		mv "$file".infected "$(echo "$file".infected | sed 's/\.[a-z]*$//')"
		if [ $bak_flag -eq 1 ]; then
			cp "$file".infected "$file".infbak;
		fi
		sed -i "/^<?php/c\<?php" "$file";
	done < $results_path/injected_results.tmp
}

phpscan ()
{
	phpscan.injected ()
	{
		#Run additional checks on files from @a_php_run1; if injected code in legit files.
		#Hardcodes: Wordpress Duplicator plugin
		#25-OCT-2015 finally replaced the hideous read line, best speed ever
		#11-DEC-2015 Was dependant on wc --files0-from which was missing in older versions of wc on some servers. Fixed this by using xargs instead, same speed.
		egrep -LZ "dtoken|DUPLICATOR_INIT|pluginbuddy|datastore=plugindata|\"id\":\"hebrew\",\"name\":\"Hebrew\"" ${a_php_run1[@]} | xargs -0 wc -L | awk 'BEGIN {OFS=ORS=""};{if($1>11615){for(i=2;i<NF;i++)print $i " "; print $NF "\n"}}' | sed -e '/total/d' -e '/^$/d' >> $results_path/injected_results.tmp;
		
			#FINAL SCAN RESULTS N GARBAGE COLLECTION

			#To-do: Label all maldet-caught stuff with a prefix or suffix for information purposes.
		cat $results_path/injected_results.tmp >> $results_path/results.tmp;
		cat ./maldetres >> $results_path/results.tmp;
		cat $results_path/results.tmp | sort -u > $results_path/results_sorted.tmp;
		cat $results_path/results_sorted.tmp | sed '/^$/d' > $results_path/results.tmp; 
		rm -f $results_path/results_sorted.tmp ./maldetres ./teed ./maldetprints ./jsteed;
		clear;
		if [ -f $results_path/results.tmp ] && [ "$(wc -l < $results_path/results.tmp)" -gt 0 ]; then
			cat $results_path/results.tmp;
		else no_hits;
		fi
		printf "\n\033[38;5;33mHits: \033[0m";
		wc -l < $results_path/results.tmp;
		echo -e "\n\e[38;5;208mThis scan used Maldet's database.\nPlease remember that there might be false positives. Do not copy-paste.\e[0m";
		printf "\nWould you like to save the report? [y/n]";
		read a;
		case $a in 
			y) TIME=$(stat -c %y $results_path/results.tmp | sed 's/\..*//' | tr " " "-");PWD="$(pwd | sed 's/\/home\///' | sed 's/\/var\/sites\/*.\///' | tr "/" "_")"_;NAME="-REPORT.txt";cp $results_path/results.tmp ~/`echo $PWD$TIME$NAME`;
		esac
		bash "$0";
	}
	if [ -f $results_path/results.tmp ]
		then
			echo "Would you like to display your previous results from:";
			stat -c %y $results_path/results.tmp;
			echo "or start a new scan? [1/2]";
			printf "Opt: ";
			read k;
			case $k in
				1) clear; cat $results_path/results.tmp; return 1;;
				2) rm -rf $results_path/results.tmp $results_path/injected_results.tmp; clear;;
				*) echo "Wrong entry"; prompt_me; sh parawp.sh;;
			esac
	fi
	#IFS set, needed for all arrays
	IFS=$'\n\t';
	printf "\033[38;5;33mWorking:\033[0m\n";
	printf "Gathering suspicious files...  ";
	#Alright, Senor, you've got double-scanning Mexican power!
	#egrep -rlZ --include="*.php" "eval|�|Ã|[Aa]rmy|[Nn]ewb|[Nn]oo[Bb]|urldecode|4_deco|[$]_(POST|SERVER|COOKIE|REQUEST)|error_reporting\(0\)|[$]GLOBALS|[[:print:]]\[\]=|[$]_=|[$][?]|[Hh]acked|[\]x[[:alnum:]]{1,2}[[:alpha:]]" . | xargs -0 md5sum | sed -e "s/  /:/g" > teed;
	egrep -rlZ --include="*.php" "[$]" . | xargs -0 md5sum | sed -e "s/  /:/g" > teed;

	echo -e "\nFinding juicy javascriptses...";
	find . -type f -name "*.js" -print0 | xargs -0 md5sum | sed -e "s/  /:/g" > jsteed;

	awk -F: 'FNR==NR{a[$1]++;next}a[$1]{print$2" [JAVASCRIPT MALDET]"}' maldetprints jsteed > ./maldetres;

	#Speedy Gonzalez is here.
	printf "Maldet scan imminent! ";
	
	awk -F: 'FNR==NR{a[$1]++;next}a[$1]{print$2}' maldetprints teed >> ./maldetres;
	a_php_run1=( $(awk -F: 'FNR==NR{a[$1]++;next}!a[$1]{print$2}' maldetprints teed) );
	if [ ${#a_php_run1[@]} -lt 1 ] || [ ${#a_php_run1[0]} -lt 7 ]
		then
		no_hits;
	fi

		#run1 curretnly has all files NOT caught by double-DB el Trafficante scan.
	printf \("\033[38;5;33m"${#a_php_run1[@]}"\033[0m"\)"\n";
	printf "Applying whitelist...\n";
		#Excludes go here
	a_php_run2=( $(egrep -L "('your_version' => 'Your Version',)|# author Roland Soos|The Original Code is lib_zip.php|language file for GeSHi|WORDPRESS DOWNLOAD MONITOR|Olivier PLATHEY|header\('Content-Type: application/pdf'\)|have no libs|wfConfig::|self::|require_once|public static|public function|duplicator|DUPLICATOR_|dtoken\.php|phpconcept|dUnzip2|class zipfile|Installatron|getID3|podPress|IMPORTBUDDY|[']AolVersion[']| extends " ${a_php_run1[@]}) );
	if [ ${#a_php_run2[@]} -lt 1 ]
		then
		phpscan.injected;
	fi
	printf "Collecting malicious functionality...\n";
	#Added support for non-alphabetic shell scripts 01-NOV-15
	#single base64 line; isset for a variable; hide errors; assoc. array with 'a'=>'b',;"\x47b;
	a_php_run3=( $(egrep -l "�|Ã|[Hh]acked|[Aa]rmy|[Nn]ewb|[Nn]oo[Bb]|[$][[:alnum:]]* ?= ?([$][[:alnum:]]*\[[0-9]\] ?\. ?){6,}|base64_decode\(.*[?][>]|isset\([$][{][$]...[}]|@ini_set\('display_errors',0\)|Array\('.'=[>]'.'[,]|[\"][\]x[[:alnum:]]{2,}|[$][[:alnum:]]=[']|[$]__[+-]|[$][[:print:]]\[\]=|echo perms\(|[$]_=|@?php_uname|[[:punct:]][[:alnum:]][\].php|gz(in|de)flate|gz(un)?compress|ignore_user_abort|set_time_limit\(0\)|base_convert|@mysql_select_db|SELECT user_login|\(function_exists\('curl_init'\)" ${a_php_run2[@]}) )
	#If our a_php_run3's empty, we don't really have any results 
	if [ ${#a_php_run3[@]} -gt 0 ]
		then
			printf "%s\n" $(egrep -L "[/][*][*][^*]?$" ${a_php_run3[@]}) > $results_path/results.tmp;
	else echo "No hits!";
	fi
	phpscan.injected;
}

jsscan()
{
	jsscan.deob()
	{
		
		
		#This beautifies the script and looks for a line longer than 1000 characters
		#find . -name "*.js" -exec sh -c 'a=`sed "s/\([};\"]\)/\1\n/g" "{}"`; if [ `echo "$a" | wc -L` -gt 1000 ];then echo "{}"; fi;' \;

		#Or if number of lines / instances of var < 2, meaning the number of variables is 50% more than the total number of lines. Kinda stupid
		#find . -name "*.js" -exec sh -c 'a=`sed "s/\([};\"]\)/\1\n/g" "{}"`; if [ `echo "$a" | wc -L` -gt 1000 ] || [ $(expr `echo "$a" | wc -l` / `echo "$a" | grep -c "var "` 2> /dev/null) -lt 2 ] 2> /dev/null;then echo "{}"; fi;' \;

		#Detect shit like this please
		#https://kb.sucuri.net/malware/signatures/js.malware.hidden-iframe.002.003

		#Function beautifier. Doesn't really help with scanning yet but it makes minified code somewhat readable. The shit above breaks on quotes too, to parse var names.
		#cat js.mal.hidden.iframe.js  | sed -e "s/{/{\n\t/g" -e "s/}/\n}\n/g"
true;
	}
}
######
# /Functions
######

######
# MAIN
######
main()
{
while :
do
	clear;	
	printf "\033[38;5;33m     PARWP $REVISION\033[38;5;208m Quarantine finally chmod 000's malware!\033[0m\n\n"
	printf "\033[38;5;33m1)\033[0m Run scan  "
	printf "\033[38;5;33m2)\033[0m Quarantine  "
	printf "\033[38;5;33m3)\033[0m Quarantine from Report\n\n"
	printf "\033[38;5;33m4)\033[0m Wordpress reset on Steroids! [Works when ran inside public_html]\n"
	printf "\033[38;5;33m5)\033[0m Default File Permissions (Recursive)\n\n"
#	printf "\033[38;5;33m6)\033[0m .htaccess to prevent php execution in /uploads/\n\n"
	printf "\033[38;5;33m6)\033[0m Add/Remove Admin User (Wordpress/Joomla/Prestashop)\n\n"
#	printf "\033[38;5;33m7)\033[0m Make gzip backup of public_html\n"
	printf "\033[38;5;33m7)\033[0m Cannot modify header... or Cookies are blocked due to... Fix\n"
	printf "\033[38;5;33m8)\033[0m Make zip of quarantined files and save outside public_html\n\n"
	printf "\033[38;5;33m9)\033[0m Hit CTRL+C or CTRL+Z to Exit and Purge\n\n"
#10
	printf "\033[38;5;33m11)\033[0m What are the scan terms?\n"
	printf "\033[38;5;33m12)\033[0m Quarantine?\n\n"
#	printf "\033[38;5;33m13)\033[0m What is Wordpress reset?\n\n"
	printf "\033[38;5;33m20)\033[0m Restore quarantined files\n"
	printf "\033[38;5;33m21)\033[0m Cure first-line injections [BETA]\n\n"
	printf "Opt: ";


	read n;
	case $n in
		1) clear; phpscan; prompt_me;;
		
		2) quarantine;printf "\033[38;5;82mDone\033[0m"; prompt_me;;

#		3) cure_files;printf "\033[38;5;82mFiles with injected code cured successfully.\033[0m"; prompt_me;;

		3) quarantine.report;printf "\033[38;5;82mDone\033[0m"; prompt_me;;

		4) wordpress_reset;;

		5) find . -type d -exec chmod 755 {} \;; find . -type f -exec chmod 644 {} \;; printf "\033[38;5;82mDone\033[0m"; prompt_me;;	

#		6) htaccess_prevent_php;printf "\033[38;5;82mDone\033[0m"; prompt_me;;

		6) echo -n "I must be in site's root! Wanna add or delete? [a/d] "; read a; case $a in a) cms_adduser a;; d) cms_adduser d;; *) echo "I did nothing.";; esac; printf "\033[38;5;82mDone\033[0m"; prompt_me;;

#		7) makegzip; clear; printf "\033[38;5;82mDone\033[0m"; prompt_me;;

		7) egrep --include="*.php" -rlZ -m 1 "^ *<\?" . | xargs -0 sed -i -e "s/^ *<?php/<?php/1"; prompt_me;;

		8) makezip;clear; printf "\033[38;5;82mDone\033[0m"; prompt_me;;

		9) destruct;;
#10
		11) clear; printf "At present, this has a minimum detection of legit files. Read source to view conditions, please."; prompt_me;;

		12) clear; printf "Quarantine is adding\na suffix of \033[38;5;33m*.php.infected\033[0m to all \033[38;5;33mfound\033[0m suspicious files,\nthus preventing them from executing."; prompt_me;;

		13) clear; printf "Wordpress reset will find the Wordpress version in the current folder, download a no-content copy of the same version and rewrite all the core files, keeping wp-config.php and the wp-content folder."; prompt_me;;
		
		14) clear; printf "To always run the latest version of PARWP,\ninstead of downloading this,\nuploading it via File manager, SSH'ing and running,\nyou could just SSH and run\n\n\033[38;5;33mwget -Nq hristo.dachev.gridhosted.co.uk/parwp.sh; bash parwp.sh\033[0m\n\nThis will download the latest version of PARWP and run it.\nDon't forget to purge!"; prompt_me;;
		
		15) clear; wget -Nq hristo.dachev.gridhosted.co.uk/changelog.parwp; cat changelog.parwp; rm -rf changelog.parwp; prompt_me;;

		20) quarantine.reverse;;

		21) egrep --include="*.php" -m 1 -rlZ "^<\?php..*" | xargs -0 sed -i '1 s/^<?php..*$/<?php/g'; prompt_me;;

		*) printf "\033[38;5;196mWrong command.\033[0m"; prompt_me;;
	esac
done
}
main;
######
# /MAIN
######
#Big thanks to the HristoGodofBashscripting